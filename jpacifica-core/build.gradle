/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.8.19")
    }
}

apply plugin: 'java-library'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven-publish'
apply plugin: 'org.jreleaser'

description = 'jpacifica core library'

dependencies {
    api project(':jpacifica-config')
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "org.jctools:jctools-core:$jctools_version"
    implementation "io.dropwizard.metrics:metrics-core:$metrics_version"
    implementation "commons-io:commons-io:$commons_io_version"
    implementation "com.lmax:disruptor:$disruptor_version"

    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockito_version"
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDir 'src/main/java'
            srcDir 'generated-sources/main/java'
        }
    }
}

test {
    useJUnitPlatform()
}

protobuf {
    // Download from repositories
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    generatedFilesBaseDir = 'generated-sources'
    generateProtoTasks {
        all().each { task ->
        }
        ofSourceSet('main')
    }
}

tasks.withType(Copy) {
    filesMatching("**/*.proto") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'jpacifica'
                description = description
                url = 'https://github.com/aalmiray/app'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'bybyset'
                        name = 'cff'
                        url = 'https://github.com/bybyset'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/bybyset/jpacifica.git'
                    developerConnection = 'scm:git:ssh://github.com/bybyset/jpacifica.git'
                    url = 'https://github.com/bybyset/jpacifica'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            nexus2 {
                'maven-central' {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                    closeRepository = true
                    releaseRepository = false
                    stagingRepository('target/staging-deploy')
                }
            }
        }
    }
}
