/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java-library'
apply plugin: 'com.google.protobuf'

description = 'jpacifica core library'

dependencies {
    api project(':jpacifica-config')
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.guava:guava:$guava_version"
    implementation "org.jctools:jctools-core:$jctools_version"
    implementation "io.dropwizard.metrics:metrics-core:$metrics_version"
    implementation "commons-io:commons-io:$commons_io_version"
    implementation "com.lmax:disruptor:$disruptor_version"

    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockito_version"
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDir 'src/main/java'
            srcDir 'generated-sources/main/java'
        }
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

protobuf {
    // Download from repositories
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    generatedFilesBaseDir = 'generated-sources'
    generateProtoTasks {
        all().configureEach { task ->
        }
        ofSourceSet("main")
    }
}

tasks.withType(Copy) {
    filesMatching("**/*.proto") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}
java {
    withJavadocJar()
    withSourcesJar()
}

tasks.named("sourcesJar") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.sourcesJar.mustRunAfter(tasks.generateProto)