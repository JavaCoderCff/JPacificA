/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Configure artifact push to Sonatype (releases repository).
configure(rootProject) {
  // These access credentials must be passed by the release manager
  // (either on command-line, via the environment or via ~/.gradle.properties).
  def sonatypeUsername = propertyOrEnvOrDefault('sonatypeUsername', "SONATYPE_USERNAME", null)
  def sonatypePassword = propertyOrEnvOrDefault('sonatypePassword', "SONATYPE_PASSWORD", null)

  task mavenToSonatypeReleases() {
    group "Distribution"
    description "Publish JPacifica Maven artifacts to sonatype repository: ${publishMavenUrlRelease}"

    dependsOn rootProject.ext.mavenProjects.collect {
      it.tasks.matching { it.name == "publishSignedJarsPublicationToSonatypeReleasesRepository" }
    }
  }

  task checkReleasesRepositoryPushPreconditions() {
    doFirst {
      // Make sure we're pushing a release version. The release repository
      // does not accept snapshots and returns cryptic errors upon trying.
      if (snapshotBuild) {
        throw new GradleException("Sonatype releases repository will not accept a snapshot version: ${rootProject.version}")
      }

      // Make sure access credentials have been passed.
      if (sonatypeUsername == null || sonatypePassword == null) {
        throw new GradleException("sonatypeUsername or sonatypePassword is empty: these are required to publish to " +
            " sonatype.")
      }
    }
  }

  configure(rootProject.ext.mavenProjects) { Project project ->
    // Make sure any actual publication task is preceded by precondition checks.
    tasks.matching { it.name ==~ /publish.+ToSonatypeReleasesRepository/ }.all {
      dependsOn rootProject.tasks.checkReleasesRepositoryPushPreconditions
    }

    // Configure the release repository.
    plugins.withType(PublishingPlugin) {
      publishing {
        repositories {
          maven {
            name = "SonatypeReleases"
            url = publishMavenUrlRelease

            credentials {
              username sonatypeUsername
              password sonatypePassword
            }
          }
        }
      }
    }
  }
}